[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Creator",
        "importPath": "creator.models",
        "description": "creator.models",
        "isExtraImport": true,
        "detail": "creator.models",
        "documentation": {}
    },
    {
        "label": "Creator",
        "importPath": "creator.models",
        "description": "creator.models",
        "isExtraImport": true,
        "detail": "creator.models",
        "documentation": {}
    },
    {
        "label": "Creator",
        "importPath": "creator.models",
        "description": "creator.models",
        "isExtraImport": true,
        "detail": "creator.models",
        "documentation": {}
    },
    {
        "label": "SocialLink",
        "importPath": "creator.models",
        "description": "creator.models",
        "isExtraImport": true,
        "detail": "creator.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "YoutubeCatalog",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "CONTENT_CATEGORIES",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "CONTENT_CATEGORIES_DICT",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "YoutubeCatalog",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "YoutubeCatalog",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "convert_iso_duration",
        "importPath": "catalog.utils",
        "description": "catalog.utils",
        "isExtraImport": true,
        "detail": "catalog.utils",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "ActivationCodeSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "CreatorSerializer",
        "importPath": "creator.serializers",
        "description": "creator.serializers",
        "isExtraImport": true,
        "detail": "creator.serializers",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "catalog.migrations.0001_initial",
        "description": "catalog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='YoutubeCatalog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "catalog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CatalogConfig",
        "kind": 6,
        "importPath": "catalog.apps",
        "description": "catalog.apps",
        "peekOfCode": "class CatalogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'catalog'",
        "detail": "catalog.apps",
        "documentation": {}
    },
    {
        "label": "YoutubeCatalog",
        "kind": 6,
        "importPath": "catalog.models",
        "description": "catalog.models",
        "peekOfCode": "class YoutubeCatalog(models.Model):\n    creator = models.ForeignKey(Creator, on_delete=models.CASCADE)\n    video_url = models.URLField()\n    video_id = models.CharField(max_length=20, unique=True)\n    title = models.CharField(max_length=200)\n    channel_name = models.CharField(max_length=200, blank=True)\n    published_at = models.DateTimeField(null=True, blank=True)\n    thumbnail_url = models.URLField(blank=True)\n    duration = models.CharField(max_length=20, blank=True)\n    view_count = models.PositiveIntegerField(default=0)",
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "CONTENT_CATEGORIES",
        "kind": 5,
        "importPath": "catalog.models",
        "description": "catalog.models",
        "peekOfCode": "CONTENT_CATEGORIES = [\n    (\"music\", \"Música\"),\n    (\"podcast\", \"Podcast\"),\n    (\"news\", \"Noticias\"),\n    (\"gaming\", \"Gaming\"),\n    (\"sports\", \"Deportes\"),\n    (\"comedy\", \"Comedia\"),\n    (\"vlog\", \"Vlogs / Vida Diaria\"),\n    (\"education\", \"Educación\"),\n    (\"technology\", \"Tecnología\"),",
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "CONTENT_CATEGORIES_DICT",
        "kind": 5,
        "importPath": "catalog.models",
        "description": "catalog.models",
        "peekOfCode": "CONTENT_CATEGORIES_DICT = dict(CONTENT_CATEGORIES)\nclass YoutubeCatalog(models.Model):\n    creator = models.ForeignKey(Creator, on_delete=models.CASCADE)\n    video_url = models.URLField()\n    video_id = models.CharField(max_length=20, unique=True)\n    title = models.CharField(max_length=200)\n    channel_name = models.CharField(max_length=200, blank=True)\n    published_at = models.DateTimeField(null=True, blank=True)\n    thumbnail_url = models.URLField(blank=True)\n    duration = models.CharField(max_length=20, blank=True)",
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "YoutubeCatalogSerializer",
        "kind": 6,
        "importPath": "catalog.serializers",
        "description": "catalog.serializers",
        "peekOfCode": "class YoutubeCatalogSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = YoutubeCatalog\n        fields = [\n            \"id\",\n            \"creator\",\n            \"video_url\",\n            \"video_id\",\n            \"title\",\n            \"channel_name\",",
        "detail": "catalog.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "catalog.urls",
        "description": "catalog.urls",
        "peekOfCode": "urlpatterns = [\n    path('channel/<str:channel_id>/', YouTubeChannelInfoView.as_view(), name='youtube-channel-info'),\n]",
        "detail": "catalog.urls",
        "documentation": {}
    },
    {
        "label": "convert_iso_duration",
        "kind": 2,
        "importPath": "catalog.utils",
        "description": "catalog.utils",
        "peekOfCode": "def convert_iso_duration(iso_duration):\n    # Inicializa minutos y segundos\n    minutes = 0\n    seconds = 0\n    # Verifica si la duración está en formato esperado\n    if iso_duration.startswith('PT'):\n        # Extrae minutos\n        minutes_part = iso_duration[2:].split('M')[0]\n        if minutes_part.isdigit():\n            minutes = int(minutes_part)",
        "detail": "catalog.utils",
        "documentation": {}
    },
    {
        "label": "YouTubeChannelInfoView",
        "kind": 6,
        "importPath": "catalog.views",
        "description": "catalog.views",
        "peekOfCode": "class YouTubeChannelInfoView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, channel_id):\n        api_key = settings.YOUTUBE_API_KEY\n        youtube = build(\"youtube\", \"v3\", developerKey=api_key)\n        try:\n            channel_request = youtube.channels().list(\n                part=\"statistics,contentDetails\", id=channel_id\n            )\n            channel_response = channel_request.execute()",
        "detail": "catalog.views",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "ActivationCodeSerializer",
        "kind": 6,
        "importPath": "core.serializers",
        "description": "core.serializers",
        "peekOfCode": "class ActivationCodeSerializer(serializers.Serializer):\n    activation_code = serializers.CharField(max_length=6)\nclass LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField()\n    def validate(self, data):\n        user = authenticate(username=data[\"email\"], password=data[\"password\"])\n        if user is None:\n            raise serializers.ValidationError(\"Credenciales incorrectas.\")\n        return data",
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "core.serializers",
        "description": "core.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField()\n    def validate(self, data):\n        user = authenticate(username=data[\"email\"], password=data[\"password\"])\n        if user is None:\n            raise serializers.ValidationError(\"Credenciales incorrectas.\")\n        return data",
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"register/\", RegisterView.as_view(), name=\"register\"),\n    path(\"login/\", LoginView.as_view(), name=\"login\"),\n    path(\"activate/\", ActivateView.as_view(), name=\"activate_account\"),\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class RegisterView(generics.CreateAPIView):\n    queryset = Creator.objects.all()\n    serializer_class = CreatorSerializer\n    def perform_create(self, serializer):\n        user = serializer.save()\n        activation_code = user.activation_code\n        send_mail(\n            'Activación de cuenta',\n            f'Por favor activa tu cuenta con el sgte codigo: {activation_code}',\n            settings.DEFAULT_FROM_EMAIL,",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class LoginView(APIView):\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data['email']\n            user = authenticate(\n                username=email, password=serializer.validated_data['password'])\n            if user is not None:\n                if not user.is_active:\n                    return Response({'error': 'Cuenta no activa.'}, status=status.HTTP_403_FORBIDDEN)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "ActivateView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class ActivateView(APIView):\n    def post(self, request):\n        serializer = ActivationCodeSerializer(data=request.data)\n        if serializer.is_valid():\n            activation_code = serializer.validated_data['activation_code']\n            try:\n                user = Creator.objects.get(activation_code=activation_code)\n                if user.is_active:\n                    return Response({\"message\": \"La cuenta ya está activada.\"}, status=status.HTTP_400_BAD_REQUEST)\n                # Activa la cuenta",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "creator.migrations.0001_initial",
        "description": "creator.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Creator',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "creator.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "creator.migrations.0002_alter_creator_is_active_alter_sociallink_platform",
        "description": "creator.migrations.0002_alter_creator_is_active_alter_sociallink_platform",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('creator', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='creator',\n            name='is_active',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "creator.migrations.0002_alter_creator_is_active_alter_sociallink_platform",
        "documentation": {}
    },
    {
        "label": "CreatorConfig",
        "kind": 6,
        "importPath": "creator.apps",
        "description": "creator.apps",
        "peekOfCode": "class CreatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'creator'",
        "detail": "creator.apps",
        "documentation": {}
    },
    {
        "label": "Creator",
        "kind": 6,
        "importPath": "creator.models",
        "description": "creator.models",
        "peekOfCode": "class Creator(AbstractUser):\n    full_name = models.CharField(max_length=150, blank=True)\n    email = models.EmailField(unique=True)\n    phone = models.CharField(max_length=20, blank=True)\n    country = models.CharField(max_length=100, blank=True)\n    profile_image = models.ImageField(upload_to=\"creators/\", blank=True, null=True)\n    activation_code = models.CharField(max_length=6, unique=True, blank=True)\n    is_active = models.BooleanField(default=False)\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS = [\"username\"]",
        "detail": "creator.models",
        "documentation": {}
    },
    {
        "label": "SocialLink",
        "kind": 6,
        "importPath": "creator.models",
        "description": "creator.models",
        "peekOfCode": "class SocialLink(models.Model):\n    PLATFORM_CHOICES = [\n        (\"facebook\", \"Facebook\"),\n        (\"instagram\", \"Instagram\"),\n        (\"tiktok\", \"TikTok\"),\n        (\"pinterest\", \"Pinterest\"),\n        (\"telegram\", \"Telegram\"),\n        (\"twitter\", \"X (Twitter)\"),\n        (\"whatsapp\", \"WhatsApp\"),\n        (\"amazon_music\", \"Amazon Music\"),",
        "detail": "creator.models",
        "documentation": {}
    },
    {
        "label": "SocialLinkSerializer",
        "kind": 6,
        "importPath": "creator.serializers",
        "description": "creator.serializers",
        "peekOfCode": "class SocialLinkSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SocialLink\n        fields = [\"id\", \"platform\", \"url\", \"order\"]\nclass SocialLinkListSerializer(serializers.Serializer):\n    links = SocialLinkSerializer(many=True)\nclass CreatorSerializer(serializers.ModelSerializer):\n    social_links = SocialLinkSerializer(many=True, required=False, allow_empty=True)\n    class Meta:\n        model = Creator",
        "detail": "creator.serializers",
        "documentation": {}
    },
    {
        "label": "SocialLinkListSerializer",
        "kind": 6,
        "importPath": "creator.serializers",
        "description": "creator.serializers",
        "peekOfCode": "class SocialLinkListSerializer(serializers.Serializer):\n    links = SocialLinkSerializer(many=True)\nclass CreatorSerializer(serializers.ModelSerializer):\n    social_links = SocialLinkSerializer(many=True, required=False, allow_empty=True)\n    class Meta:\n        model = Creator\n        fields = [\n            \"username\",\n            \"email\",\n            \"password\",",
        "detail": "creator.serializers",
        "documentation": {}
    },
    {
        "label": "CreatorSerializer",
        "kind": 6,
        "importPath": "creator.serializers",
        "description": "creator.serializers",
        "peekOfCode": "class CreatorSerializer(serializers.ModelSerializer):\n    social_links = SocialLinkSerializer(many=True, required=False, allow_empty=True)\n    class Meta:\n        model = Creator\n        fields = [\n            \"username\",\n            \"email\",\n            \"password\",\n            \"full_name\",\n            \"phone\",",
        "detail": "creator.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "creator.urls",
        "description": "creator.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"me/\", CreatorDetailView.as_view(), name=\"creator-detail\"),\n    path(\"social-links/\",SocialLinkListCreateView.as_view(),name=\"social-link-list-create\"),\n    path(\"social-links/<int:pk>/\",SocialLinkDetailView.as_view(),name=\"social-link-detail\"),\n    path(\"social-links/bulk-update/\",SocialLinkBulkUpdateView.as_view(),name=\"social-link-bulk-update\"),\n]",
        "detail": "creator.urls",
        "documentation": {}
    },
    {
        "label": "SocialLinkListCreateView",
        "kind": 6,
        "importPath": "creator.views",
        "description": "creator.views",
        "peekOfCode": "class SocialLinkListCreateView(generics.ListCreateAPIView):\n    serializer_class = SocialLinkSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return SocialLink.objects.filter(creator=self.request.user)\nclass SocialLinkDetailView(generics.RetrieveUpdateDestroyAPIView):\n    serializer_class = SocialLinkSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return SocialLink.objects.filter(creator=self.request.user)",
        "detail": "creator.views",
        "documentation": {}
    },
    {
        "label": "SocialLinkDetailView",
        "kind": 6,
        "importPath": "creator.views",
        "description": "creator.views",
        "peekOfCode": "class SocialLinkDetailView(generics.RetrieveUpdateDestroyAPIView):\n    serializer_class = SocialLinkSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return SocialLink.objects.filter(creator=self.request.user)\nclass SocialLinkBulkUpdateView(generics.UpdateAPIView):\n    serializer_class = SocialLinkListSerializer\n    permission_classes = [IsAuthenticated]\n    def update(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)",
        "detail": "creator.views",
        "documentation": {}
    },
    {
        "label": "SocialLinkBulkUpdateView",
        "kind": 6,
        "importPath": "creator.views",
        "description": "creator.views",
        "peekOfCode": "class SocialLinkBulkUpdateView(generics.UpdateAPIView):\n    serializer_class = SocialLinkListSerializer\n    permission_classes = [IsAuthenticated]\n    def update(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        # Iterar sobre los enlaces y actualizar o crear según sea necesario\n        for link_data in serializer.validated_data['links']:\n            link_id = link_data.get('id')\n            if link_id:",
        "detail": "creator.views",
        "documentation": {}
    },
    {
        "label": "CreatorDetailView",
        "kind": 6,
        "importPath": "creator.views",
        "description": "creator.views",
        "peekOfCode": "class CreatorDetailView(generics.RetrieveAPIView):\n    serializer_class = CreatorSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user",
        "detail": "creator.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "kraktv_api.asgi",
        "description": "kraktv_api.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "kraktv_api.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-xu--&a12i(o()2x)e4)r*x6o9%$!-+3djm4@fksiwl0qt3#0s1'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['192.168.1.4', 'localhost', '127.0.0.1']\nYOUTUBE_API_KEY = 'AIzaSyB8h1m3aTNqXzXnGivzq8-3QFskgu2Nmes'\n# Application definition\nAUTH_USER_MODEL = 'creator.Creator'\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-xu--&a12i(o()2x)e4)r*x6o9%$!-+3djm4@fksiwl0qt3#0s1'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['192.168.1.4', 'localhost', '127.0.0.1']\nYOUTUBE_API_KEY = 'AIzaSyB8h1m3aTNqXzXnGivzq8-3QFskgu2Nmes'\n# Application definition\nAUTH_USER_MODEL = 'creator.Creator'\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['192.168.1.4', 'localhost', '127.0.0.1']\nYOUTUBE_API_KEY = 'AIzaSyB8h1m3aTNqXzXnGivzq8-3QFskgu2Nmes'\n# Application definition\nAUTH_USER_MODEL = 'creator.Creator'\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['192.168.1.4', 'localhost', '127.0.0.1']\nYOUTUBE_API_KEY = 'AIzaSyB8h1m3aTNqXzXnGivzq8-3QFskgu2Nmes'\n# Application definition\nAUTH_USER_MODEL = 'creator.Creator'\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "YOUTUBE_API_KEY",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "YOUTUBE_API_KEY = 'AIzaSyB8h1m3aTNqXzXnGivzq8-3QFskgu2Nmes'\n# Application definition\nAUTH_USER_MODEL = 'creator.Creator'\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'creator.Creator'\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'catalog',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'catalog',\n    'rest_framework',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',    \n]",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "ROOT_URLCONF = 'kraktv_api.urls'\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "WSGI_APPLICATION = 'kraktv_api.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Token de acceso expira en 30 días",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Token de acceso expira en 30 días\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Token de refresco expira en 30 días (opcional)",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Token de acceso expira en 30 días\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Token de refresco expira en 30 días (opcional)\n}",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Token de acceso expira en 30 días\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Token de refresco expira en 30 días (opcional)\n}\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # Token de acceso expira en 30 días\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Token de refresco expira en 30 días (opcional)\n}\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'sandbox.smtp.mailtrap.io'\nEMAIL_PORT = 2525\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = '43d8cd02d3d86d'\nEMAIL_HOST_PASSWORD = 'ab652c09189432'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'sandbox.smtp.mailtrap.io'\nEMAIL_PORT = 2525\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = '43d8cd02d3d86d'\nEMAIL_HOST_PASSWORD = 'ab652c09189432'\nDEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\nEMAIL_PORT = 2525\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = '43d8cd02d3d86d'\nEMAIL_HOST_PASSWORD = 'ab652c09189432'\nDEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "EMAIL_PORT = 2525\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = '43d8cd02d3d86d'\nEMAIL_HOST_PASSWORD = 'ab652c09189432'\nDEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = '43d8cd02d3d86d'\nEMAIL_HOST_PASSWORD = 'ab652c09189432'\nDEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "EMAIL_HOST_USER = '43d8cd02d3d86d'\nEMAIL_HOST_PASSWORD = 'ab652c09189432'\nDEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'ab652c09189432'\nDEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "kraktv_api.settings",
        "description": "kraktv_api.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = 'duquekun@gmail.com'",
        "detail": "kraktv_api.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "kraktv_api.urls",
        "description": "kraktv_api.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tokens', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('auth/', include('core.urls')),\n    path('creators/', include('creator.urls')),\n    path('youtube/', include('catalog.urls')),\n]",
        "detail": "kraktv_api.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "kraktv_api.wsgi",
        "description": "kraktv_api.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "kraktv_api.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kraktv_api.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]